{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nconst article = ({\n  article\n}) => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: article.title\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: article.body\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Link, {\n      href: \"/\",\n      children: \"Go Back\"\n    })]\n  });\n};\n\nexport const getStaticProps = async context => {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${context.params.id}`);\n  const article = await res.json();\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\n  const articles = await res.json();\n  const ids = articles.map(article => article.id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default article;","map":null,"metadata":{},"sourceType":"module"}